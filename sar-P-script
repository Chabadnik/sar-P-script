#!/bin/bash

# sar-P-script : script that will take sar-P and plot it

# how many times does the user want sar -P to run?
read -p "Enter how many times you want sar -P to run > " num

current_t=$(date +"%T")
file_name="`date "+%Y-%m-%d-%H:%M:%S"`"

# input the sar-P results into a file
LC_TIME='POSIX' sar -P ALL 1 $num | grep "all" > sar-P-1-1

new_t=$(date +"%T")

# remove the first line (you don't need it)
sed -i '/dennis/d' sar-P-1-1

# makes the spaces commas, and then squeezes repeating commas
tr -s  ' ' ',' < sar-P-1-1 > new-sar-P-1-1

# cuts the first field into a new file (the times)
cut -d ',' -f 1 new-sar-P-1-1 > sar-times

# cuts the last field into a new file (percentages)
cut -d ',' -f 8 new-sar-P-1-1 > sar_idle
cut -d ',' -f 8 new-sar-P-1-1 >> ~/sar_logs/sar_P_idle_log

# creates an x and y table
paste sar-times sar_idle > $file_name

# cuts away anything that we don't need (headers)
sed -i '/Average/d' $file_name
sed -i '/idle/d' $file_name

# gnuplot function
gnuplot -p <<EOF

set xdata time
set timefmt "%H:%M:%S"
set xrange ["$current_t":"$new_t"]
set format x "%H:%M:%S"
set ylabel "%idle"
set xlabel "time"
set title "$file_name.idle"
set yrange [0:100]
set style line 1 lc rgb '#8b1a0e' pt 1 ps 1 lt 1 lw 2 # --- red
set style line 2 lc rgb '#5e9c36' pt 6 ps 1 lt 1 lw 2 # --- green
set style line 11 lc rgb '#808080' lt 1
set border 3 back ls 11
set tics nomirror
set style line 12 lc rgb '#808080' lt 0 lw 1
set grid back ls 12
set terminal png size 800,600 enhanced font "Helvetica,15"
set output "$file_name.png"
set style line 1 lc rgb '#0060ad' lt 1 lw 2 pt 7 ps 1.5   # --- blue
plot "$file_name" using 1:2 with linespoints ls 1 notitle
EOF

# moves the png into its appropriate folder
mv $file_name.png ~/gnuplot_plots

echo "Check the gnuplot_plots folder in your home directory!"
# remove all of the place-holders
rm $file_name
rm sar-P-1-1
rm new-sar-P-1-1
rm sar-times
rm sar_idle
